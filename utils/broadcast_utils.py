import asyncio
import logging
from typing import Callable
from aiogram import Bot
from sqlalchemy.ext.asyncio import AsyncSession
from database.orm_query import get_active_users, deactivate_user

async def send_broadcast(
    bot: Bot,
    session: AsyncSession,
    send_func: Callable,
    content_type: str,
    **kwargs
    )-> tuple[int, int]:
    """
    –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ª–∏–º–∏—Ç–æ–≤ Telegram
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        session: –°–µ—Å—Å–∏—è –ë–î
        send_func: –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (bot.send_message, bot.send_video –∏ —Ç.–¥.)
        content_type: –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        **kwargs: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    
    Returns:
        tuple[int, int]: (success_count, failed_count)
    """
    users = await get_active_users(session)
    if not users:
        return 0, 0
    
    success_count = 0
    failed_count = 0
    batch_size = 30  # –õ–∏–º–∏—Ç Telegram: 30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É
    delay = 1.0
    
    for i in range(0, len(users), batch_size):
        batch = users[i:i+batch_size]
        tasks = []
        for user in batch:
            task = send_func(chat_id=str(user.tg_id), **kwargs)
            tasks.append((user, task))
        for user, task in tasks:
            try:
                await task
                success_count += 1
            except Exception as e:
                failed_count += 1
                await deactivate_user(session, user.tg_id)
                logging.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:  {user.tg_id}")
        if i + batch_size < len(users):
            await asyncio.sleep(delay)
    return success_count, failed_count

def format_broadcast_result(
    success_count: int, 
    failed_count: int, 
    content_type: str, 
    content_description: str
    ) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
    
    Args:
        success_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
        failed_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
        content_type: –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ç–µ–∫—Å—Ç, –≤–∏–¥–µ–æ –∏ —Ç.–¥.)
        content_description: –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    """
    if success_count > 0 or failed_count > 0:
        return (
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ {content_type} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n\n"
            f"üìù –ö–æ–Ω—Ç–µ–Ω—Ç: <i>\"{content_description}\"</i>"
        )
    else:
        return "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç"