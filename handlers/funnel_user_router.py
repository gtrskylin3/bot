from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.fsm.context import FSMContext
from datetime import datetime

import keyboards.funnel_kb as funnel_kb
import keyboards.user_kb as user_kb
from database.orm_query import (
    get_active_funnels, 
    start_user_funnel, 
    get_user_funnel_progress, 
    get_funnel_with_steps, 
    advance_user_funnel,
    reset_user_funnel_progress,
    get_user_all_funnel_progress
)
from database.models import FunnelProgress, Funnel

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≤–æ—Ä–æ–Ω–∫–µ
funnel_user_router = Router()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç—Ç–∞–ø–∞ –≤–æ—Ä–æ–Ω–∫–∏
async def send_funnel_step(message: Message, session: AsyncSession, progress: FunnelProgress, funnel: Funnel):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —ç—Ç–∞–ø –≤–æ—Ä–æ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    funnel_with_steps = await get_funnel_with_steps(session, funnel.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–∞–ø—ã –≤ –≤–æ—Ä–æ–Ω–∫–µ
    if not funnel_with_steps or not funnel_with_steps.steps:
        await message.answer(
            '‚ùå –ö—É—Ä—Å –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            reply_markup=user_kb.back_mrk
        )
        return
    
    total_steps = len(funnel_with_steps.steps)

    # –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ –∫—É—Ä—Å –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π, –Ω–æ —ç—Ç–∞–ø–æ–≤ —Å—Ç–∞–ª–æ –±–æ–ª—å—à–µ
    if progress.is_completed and progress.current_step < total_steps:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —ç—Ç–∞–ø—ã –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ
        has_free_steps_ahead = False
        for i in range(progress.current_step - 1, total_steps):  # -1 –ø–æ—Ç–æ–º—É —á—Ç–æ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å 0
            step = funnel_with_steps.steps[i]
            if step.is_free:
                has_free_steps_ahead = True
                break
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —ç—Ç–∞–ø—ã –≤–ø–µ—Ä–µ–¥–∏, —Å–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if has_free_steps_ahead:
            progress.is_completed = False
            progress.completed_at = None
            await session.commit()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if progress.current_step > len(funnel_with_steps.steps) or progress.current_step < 1:
        await message.answer('‚ùå –≠—Ç–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
    
    current_step = funnel_with_steps.steps[progress.current_step - 1]
    
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    step_text = f'üìö <b>{current_step.title}</b>\n\n'
    step_text += f'{current_step.content}\n\n'
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —ç—Ç–∞–ø–∞
    if current_step.is_free:
        # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —ç—Ç–∞–ø
        if progress.current_step == total_steps:
            # –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–ø - –∫—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω
            progress.is_completed = True
            progress.completed_at = datetime.now()
            await session.commit()
            
            step_text += 'üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫—É—Ä—Å!</b>\n\n'
            step_text += '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.'
            reply_markup = funnel_kb.funnel_complete_kb
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫"
            reply_markup = funnel_kb.funnel_next_kb
    else:
        # –ü–ª–∞—Ç–Ω—ã–π —ç—Ç–∞–ø - –∫—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω –Ω–∞ –ø–ª–∞—Ç–Ω–æ–π —á–∞—Å—Ç–∏
        progress.is_completed = True
        progress.completed_at = datetime.now()
        await session.commit()
        
        step_text += 'üí∞ <b>–≠—Ç–æ –ø–ª–∞—Ç–Ω—ã–π —ç—Ç–∞–ø –∫—É—Ä—Å–∞</b>\n\n'
        step_text += '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É.\n\n'
        step_text += 'üìû <b>–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º:</b> @Olesja_Chernova'
        reply_markup = funnel_kb.funnel_paid_stop_kb
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if current_step.content_type == 'video' and current_step.file_id:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é
        await message.answer_video(
            video=current_step.file_id,
            caption=step_text,
            reply_markup=reply_markup
        )
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await message.answer(step_text, reply_markup=reply_markup)

# –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
@funnel_user_router.callback_query(F.data=='start_funnel')
async def show_available_courses(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    await callback.answer('')
    
    funnels = await get_active_funnels(session)
    if not funnels:
        await callback.message.answer(
            '‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!',
            reply_markup=user_kb.back_mrk
        )
        return
    
    # –ï—Å–ª–∏ –∫—É—Ä—Å –æ–¥–∏–Ω, —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º –µ–≥–æ
    if len(funnels) == 1:
        funnel = funnels[0]
        await start_course_for_user(callback.message, session, funnel, state)
    else:
        # –ï—Å–ª–∏ –∫—É—Ä—Å–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
        await show_course_selection(callback.message, funnels)

async def show_course_selection(message: Message, funnels: list[Funnel]):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    text = 'üìö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã</b>\n\n'
    text += '–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏:\n\n'
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫—É—Ä—Å–∞–º–∏
    kb = funnel_kb.get_course_selection_kb(funnels)
    
    await message.answer(text, reply_markup=kb)

async def start_course_for_user(message: Message, session: AsyncSession, funnel: Funnel, state: FSMContext = None):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –∫—É—Ä—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    progress = await start_user_funnel(session, message.chat.id, funnel.id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–æ—Ä–æ–Ω–∫–∏ –≤ state –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    if state is not None:
        await state.update_data(current_funnel_id=funnel.id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø
    await send_funnel_step(message, session, progress, funnel)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞
@funnel_user_router.callback_query(F.data.startswith('select_course:'))
async def select_course_handler(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    await callback.answer('')
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫—É—Ä—Å–∞ –∏–∑ callback_data
        funnel_id = int(callback.data.split(':')[1])
        funnel = await session.get(Funnel, funnel_id)
        
        if funnel and funnel.is_active:
            await start_course_for_user(callback.message, session, funnel, state)
        else:
            await callback.message.answer('‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.')
    except (ValueError, IndexError):
        await callback.message.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫—É—Ä—Å–∞.')

# –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É –≤–æ—Ä–æ–Ω–∫–∏
@funnel_user_router.callback_query(F.data=='funnel_next')
async def next_funnel_step(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    await callback.answer('')
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–π –≤–æ—Ä–æ–Ω–∫–∏ –∏–∑ state
    data = await state.get_data()
    current_funnel_id = data.get('current_funnel_id')
    
    if not current_funnel_id:
        await callback.message.answer('‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∫—É—Ä—Å –∑–∞–Ω–æ–≤–æ.')
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–æ—Ä–æ–Ω–∫—É
    current_funnel = await session.get(Funnel, current_funnel_id)
    if not current_funnel:
        await callback.message.answer('‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∫—É—Ä—Å –∑–∞–Ω–æ–≤–æ.')
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–æ—Ä–æ–Ω–∫–µ
    user_progress = await get_user_funnel_progress(session, callback.from_user.id, current_funnel_id)
    
    if not user_progress:
        await callback.message.answer('‚ùå –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∫—É—Ä—Å –∑–∞–Ω–æ–≤–æ.')
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –∫—É—Ä—Å
    # if user_progress.is_completed:
    #     await callback.message.answer(
    #         'üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫—É—Ä—Å!</b>\n\n'
    #         '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.',
    #         reply_markup=funnel_kb.funnel_complete_kb
    #     )
    #     return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
    updated_progress = await advance_user_funnel(session, callback.from_user.id, current_funnel_id)
    
    if updated_progress:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø (–ª–æ–≥–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ send_funnel_step)
        await send_funnel_step(callback.message, session, updated_progress, current_funnel)
    else:
        await callback.message.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É.')

# –ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@funnel_user_router.callback_query(F.data=='funnel_progress')
async def show_funnel_progress(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    await callback.answer('')
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–π –≤–æ—Ä–æ–Ω–∫–∏ –∏–∑ state
    data = await state.get_data()
    current_funnel_id = data.get('current_funnel_id')
    
    if not current_funnel_id:
        await callback.message.answer('‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∫—É—Ä—Å –∑–∞–Ω–æ–≤–æ.')
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–æ—Ä–æ–Ω–∫—É
    current_funnel = await session.get(Funnel, current_funnel_id)
    if not current_funnel:
        await callback.message.answer('‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∫—É—Ä—Å –∑–∞–Ω–æ–≤–æ.')
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–æ—Ä–æ–Ω–∫–µ
    user_progress = await get_user_funnel_progress(session, callback.from_user.id, current_funnel_id)
    
    if not user_progress:
        await callback.message.answer('‚ùå –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∫—É—Ä—Å –∑–∞–Ω–æ–≤–æ.')
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    funnel_with_steps = await get_funnel_with_steps(session, current_funnel_id)
    total_steps = len(funnel_with_steps.steps) if funnel_with_steps else 0
    
    progress_text = f'üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∫—É—Ä—Å–µ "{current_funnel.name}"</b>\n\n'
    progress_text += f'üìà <b>–≠—Ç–∞–ø:</b> {user_progress.current_step} –∏–∑ {total_steps}\n'
    progress_text += f'üìÖ <b>–ù–∞—á–∞—Ç–æ:</b> {user_progress.started_at.strftime("%d.%m.%Y")}\n'
    
    if user_progress.is_completed and user_progress.current_step == total_steps:
        progress_text += f'‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ó–∞–≤–µ—Ä—à–µ–Ω–æ\n'
        progress_text += f'üéØ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–æ:</b> {user_progress.completed_at.strftime("%d.%m.%Y")}\n'
    else:
        progress_text += f'üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> –í –ø—Ä–æ—Ü–µ—Å—Å–µ\n'
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
        if user_progress.is_completed:
            user_progress.is_completed = False
            user_progress.completed_at = None
            await session.commit()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º —ç—Ç–∞–ø–µ
        if user_progress.current_step <= total_steps and funnel_with_steps:
            current_step = funnel_with_steps.steps[user_progress.current_step - 1]
            progress_text += f'üìö <b>–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫:</b> {current_step.title}\n'
            progress_text += f'üí∞ <b>–¢–∏–ø:</b> {"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π" if current_step.is_free else "–ü–ª–∞—Ç–Ω—ã–π"}\n'
    
    await callback.message.answer(progress_text, reply_markup=user_kb.back_mrk)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤ (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è)
@funnel_user_router.callback_query(F.data=='consultation_request')
async def consultation_request_handler(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.answer(
        'üíº <b>–ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é</b>\n\n'
        '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n'
        'üìû <b>–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º:</b> @Olesja_Chernova\n\n'
        'üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –ø—Å–∏—Ö–æ–ª–æ–≥—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n\n'
        'üéØ <b>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</b>\n'
        '‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥\n'
        '‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è\n'
        '‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n'
        '‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫—É –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ',
        reply_markup=funnel_kb.funnel_continue_kb
    )

@funnel_user_router.callback_query(F.data=='more_materials')
async def more_materials_handler(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.answer(
        'üìö <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</b>\n\n'
        '–ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è:\n\n'
        'üìñ <b>–ó–∞–ø–∏—Å–∏ —ç—Ñ–∏—Ä–æ–≤:</b> https://t.me/+vQ_g1edapwM2YmQy\n'
        '‚≠ê <b>–û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤:</b> https://t.me/+znP0wsKNCENlMmVi\n'
        'üéÅ <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:</b> https://t.me/+OISLRdIfqhBiYzBi\n\n'
        'üíº <b>–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é:</b> @Olesja_Chernova',
        reply_markup=user_kb.back_mrk
    )

@funnel_user_router.callback_query(F.data=='restart_course')
async def restart_course_handler(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    await callback.answer('')
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–π –≤–æ—Ä–æ–Ω–∫–∏ –∏–∑ state
    data = await state.get_data()
    current_funnel_id = data.get('current_funnel_id')
    
    if current_funnel_id:
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å
        current_funnel = await session.get(Funnel, current_funnel_id)
        if current_funnel and current_funnel.is_active:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await reset_user_funnel_progress(session, callback.from_user.id, current_funnel_id)
            # –ù–∞—á–∏–Ω–∞–µ–º –∫—É—Ä—Å –∑–∞–Ω–æ–≤–æ
            await start_course_for_user(callback.message, session, current_funnel, state)
            return
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å, –Ω–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
    funnels = await get_active_funnels(session)
    if funnels:
        await start_course_for_user(callback.message, session, funnels[0], state)
    else:
        await callback.message.answer('‚ùå –ö—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.')

@funnel_user_router.callback_query(F.data=='my_courses')
async def show_my_courses(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    await callback.answer('')
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_progresses = await get_user_all_funnel_progress(session, callback.from_user.id)
    
    if not user_progresses:
        await callback.message.answer(
            'üìö <b>–í–∞—à–∏ –∫—É—Ä—Å—ã</b>\n\n'
            '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.\n\n'
            'üéÅ –ù–∞—á–Ω–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!',
            reply_markup=user_kb.start_kb.as_markup()
        )
        return
    
    text = 'üìö <b>–í–∞—à–∏ –∫—É—Ä—Å—ã</b>\n\n'
    
    for progress in user_progresses:
        funnel = await session.get(Funnel, progress.funnel_id)
        if funnel and funnel.is_active:
            funnel_with_steps = await get_funnel_with_steps(session, funnel.id)
            total_steps = len(funnel_with_steps.steps) if funnel_with_steps else 0
            
            text += f'üìã <b>{funnel.name}</b>\n'
            text += f'üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress.current_step} –∏–∑ {total_steps}\n'
            
            if progress.is_completed and progress.current_step == total_steps:
                text += f'‚úÖ –°—Ç–∞—Ç—É—Å: –ó–∞–≤–µ—Ä—à–µ–Ω\n'
                text += f'üéØ –ó–∞–≤–µ—Ä—à–µ–Ω: {progress.completed_at.strftime("%d.%m.%Y")}\n'
            else:
                text += f'üîÑ –°—Ç–∞—Ç—É—Å: –í –ø—Ä–æ—Ü–µ—Å—Å–µ\n'
                text += f'üìÖ –ù–∞—á–∞—Ç: {progress.started_at.strftime("%d.%m.%Y")}\n'
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
                if progress.is_completed:
                    progress.is_completed = False
                    progress.completed_at = None
                    await session.commit()
            
            text += '\n'
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    kb = InlineKeyboardBuilder()
    kb.button(text='üéÅ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∫—É—Ä—Å', callback_data='start_funnel')
    kb.button(text='üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back')
    kb.adjust(1)
    
    await callback.message.answer(text, reply_markup=kb.as_markup())
