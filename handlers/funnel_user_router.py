from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession

import keyboards.funnel_kb as funnel_kb
import keyboards.user_kb as user_kb
from database.orm_query import get_active_funnels, start_user_funnel, get_user_funnel_progress, get_funnel_with_steps, advance_user_funnel
from database.models import FunnelProgress, Funnel

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≤–æ—Ä–æ–Ω–∫–µ
funnel_user_router = Router()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç—Ç–∞–ø–∞ –≤–æ—Ä–æ–Ω–∫–∏
async def send_funnel_step(message: Message, session: AsyncSession, progress: FunnelProgress, funnel: Funnel):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —ç—Ç–∞–ø –≤–æ—Ä–æ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    funnel_with_steps = await get_funnel_with_steps(session, funnel.id)
    
    if progress.current_step > len(funnel_with_steps.steps):
        await message.answer('‚ùå –≠—Ç–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
    
    current_step = funnel_with_steps.steps[progress.current_step - 1]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    step_text = f'üìö <b>{current_step.title}</b>\n\n'
    
    # –í—ã–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —ç—Ç–∞–ø–∞
    if not current_step.is_free:
        reply_markup = funnel_kb.funnel_paid_kb
    else:
        reply_markup = funnel_kb.funnel_next_kb
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if current_step.content_type == 'video' and current_step.file_id:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é
        caption = f'{step_text}{current_step.content}\n\n'
        if not current_step.is_free:
            caption += 'üí∞ <b>–≠—Ç–æ –ø–ª–∞—Ç–Ω—ã–π —ç—Ç–∞–ø</b>\n'
            caption += '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É.\n'
        
        await message.answer_video(
            video=current_step.file_id,
            caption=caption,
            reply_markup=reply_markup
        )
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        step_text += f'{current_step.content}\n\n'
        if not current_step.is_free:
            step_text += 'üí∞ <b>–≠—Ç–æ –ø–ª–∞—Ç–Ω—ã–π —ç—Ç–∞–ø</b>\n'
            step_text += '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É.\n'
        
        await message.answer(step_text, reply_markup=reply_markup) 




# –ù–∞—á–∞–ª–æ –≤–æ—Ä–æ–Ω–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@funnel_user_router.callback_query(F.data=='start_funnel')
async def start_funnel_for_user(callback: CallbackQuery, session: AsyncSession):
    await callback.answer('')

    funnels = await get_active_funnels(session)

    if not funnels:
        await callback.message.answer(
            '‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!',
            reply_markup=user_kb.back_mrk
        )
        return
    
    funnel = funnels[0]
    progress = await start_user_funnel(session, callback.from_user.id, funnel.id)

    await send_funnel_step(callback.message, session, progress, funnel)
    
# –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É –≤–æ—Ä–æ–Ω–∫–∏
@funnel_user_router.callback_query(F.data=='funnel_next')
async def next_funnel_step(callback: CallbackQuery, session: AsyncSession):
    await callback.answer('')
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    funnels = await get_active_funnels(session)
    if not funnels:
        await callback.message.answer('‚ùå –í–æ—Ä–æ–Ω–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
        return
    funnel = funnels[0]
    progress = await get_user_funnel_progress(session, callback.from_user.id, funnel.id)
    
    if not progress:
        await callback.message.answer('‚ùå –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
    
    if progress.is_completed:
        await callback.message.answer(
            'üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫—É—Ä—Å!</b>\n\n'
            '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.',
            reply_markup=funnel_kb.funnel_complete_kb
        )
    else:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
        progress = await advance_user_funnel(session, callback.from_user.id, funnel.id)
        await send_funnel_step(callback.message, session, progress, funnel)

# –ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@funnel_user_router.callback_query(F.data=='funnel_progress')
async def show_funnel_progress(callback: CallbackQuery, session: AsyncSession):
    await callback.answer('')
    
    funnels = await get_active_funnels(session)
    if not funnels:
        await callback.message.answer('‚ùå –í–æ—Ä–æ–Ω–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
        return
    
    funnel = funnels[0]
    progress = await get_user_funnel_progress(session, callback.from_user.id, funnel.id)
    
    if not progress:
        await callback.message.answer('‚ùå –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    funnel_with_steps = await get_funnel_with_steps(session, funnel.id)
    total_steps = len(funnel_with_steps.steps)
    
    progress_text = f'üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∫—É—Ä—Å–µ "{funnel.name}"</b>\n\n'
    progress_text += f'üìà <b>–≠—Ç–∞–ø:</b> {progress.current_step} –∏–∑ {total_steps}\n'
    progress_text += f'üìÖ <b>–ù–∞—á–∞—Ç–æ:</b> {progress.started_at.strftime("%d.%m.%Y")}\n'
    
    if progress.is_completed:
        progress_text += f'‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ó–∞–≤–µ—Ä—à–µ–Ω–æ\n'
        progress_text += f'üéØ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–æ:</b> {progress.completed_at.strftime("%d.%m.%Y")}\n'
    else:
        progress_text += f'üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> –í –ø—Ä–æ—Ü–µ—Å—Å–µ\n'
    
    await callback.message.answer(progress_text, reply_markup=user_kb.back_mrk)
