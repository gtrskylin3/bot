from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from filters.admin_filter import IsAdmin
from database.orm_query import get_or_create_broadcast_settings, update_default_broadcast_text
from utils.broadcast_utils import send_broadcast, format_broadcast_result
import keyboards.admin_kb as admin_kb

broadcast_router = Router()
broadcast_router.message.filter(IsAdmin())
broadcast_router.callback_query.filter(IsAdmin())

class BroadcastSettings(StatesGroup):
    waiting_for_default_text = State()
    waiting_for_custom_text = State()
    waiting_for_default_text_confirm = State()
    waiting_for_custom_confirm = State()

class SendVideo(StatesGroup):
    waiting_for_video = State()
    waiting_for_caption = State()
    waiting_for_confirm = State()

class SendVideoNote(StatesGroup):
    waiting_for_note = State()
    waiting_for_confirm = State()

@broadcast_router.callback_query(F.data=='broadcast_menu')
async def broadcast_menu(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
    await callback.message.delete()
    await callback.answer('')
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:', reply_markup=admin_kb.broadcast_menu.as_markup())


@broadcast_router.message(Command(commands='cancel'))
async def cancel_broadcast_settings(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
        await message.answer('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.', reply_markup=admin_kb.admin_kb.as_markup())
    else:
        await message.answer('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.')

@broadcast_router.callback_query(F.data=='send_all')
async def send_all_menu(callback: CallbackQuery, session: AsyncSession):
    await callback.message.delete()
    await callback.answer('')
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –∞–¥–º–∏–Ω–∞
    settings = await get_or_create_broadcast_settings(session)
    
    await callback.message.answer(
        f'üì¢ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n'
        f'–¢–µ–∫—É—â–∏–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç:\n'
        f'<i>"{settings.default_text}"</i>\n\n'
        f'–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:',
        reply_markup=admin_kb.broadcast_kb.as_markup()
    )

@broadcast_router.callback_query(F.data=='send_custom')
async def start_custom_broadcast(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer('')
    await state.set_state(BroadcastSettings.waiting_for_custom_text)
    await callback.message.answer(
        '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n'
        '–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel'
    )

@broadcast_router.callback_query(F.data=='change_default')
async def start_change_default(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer('')
    await state.set_state(BroadcastSettings.waiting_for_default_text)
    await callback.message.answer(
        '‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n'
        '–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel'
    )

@broadcast_router.message(BroadcastSettings.waiting_for_custom_text)
async def get_custom_text(message: Message, state: FSMContext):
    custom_text = message.text
    await state.update_data(custom_text=custom_text)
    await state.set_state(BroadcastSettings.waiting_for_custom_confirm)
    await message.answer(
        f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?\n\n'
        f'<b>–¢–µ–∫—Å—Ç:</b> {custom_text}\n\n',
        reply_markup=admin_kb.confirm_send_custom_text
    )

@broadcast_router.callback_query(F.data=='edit_custom_text', BroadcastSettings.waiting_for_custom_confirm)
async def edit_custom_text(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer('')
    await state.set_state(BroadcastSettings.waiting_for_custom_text)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:')

@broadcast_router.callback_query(F.data=='confirm_send_text', BroadcastSettings.waiting_for_custom_confirm)
async def confirm_send_text(callback: CallbackQuery, bot: Bot, session: AsyncSession, state: FSMContext):
    data = await state.get_data()
    custom_text = data.get('custom_text')
    await state.clear()
    success_count, failed_count = await send_broadcast(
        bot=bot,
        session=session,
        send_func=bot.send_message,
        content_type="–∫–∞—Å—Ç–æ–º–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º",
        text=custom_text
    )
    result_text = format_broadcast_result(success_count, failed_count, "–∫–∞—Å—Ç–æ–º–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º", custom_text)
    await callback.message.answer(result_text, reply_markup=admin_kb.admin_kb.as_markup())
    await callback.message.delete()
    await callback.answer('')

@broadcast_router.message(BroadcastSettings.waiting_for_default_text)
async def get_new_default_text(message: Message, state: FSMContext, session: AsyncSession):
    new_text = message.text
    await state.clear()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
    await update_default_broadcast_text(session, new_text)
    
    await message.answer(
        f"‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
        f"üìù –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç: <i>\"{new_text}\"</i>\n\n"
        f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –≤—ã–±–æ—Ä–µ '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç' –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç.",
        reply_markup=admin_kb.broadcast_kb.as_markup()
    )

@broadcast_router.callback_query(F.data=='send_default')
async def send_default_broadcast(callback: CallbackQuery, bot: Bot, session: AsyncSession, state: FSMContext):
    await callback.message.delete()
    await callback.answer('')
    await state.set_state(BroadcastSettings.waiting_for_default_text_confirm)
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
    settings = await get_or_create_broadcast_settings(session)
    await state.update_data(default_text=settings.default_text)
    await callback.message.answer(
        f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?\n\n'
        f'<b>–¢–µ–∫—Å—Ç:</b> {settings.default_text}\n\n',
        reply_markup=admin_kb.confirm_send_default_text
    )

@broadcast_router.callback_query(F.data=='confirm_send_text', BroadcastSettings.waiting_for_default_text_confirm)
async def confirm_send_text(callback: CallbackQuery, bot: Bot, session: AsyncSession, state: FSMContext):
    data = await state.get_data()
    default_text = data.get('default_text')
    await state.clear()
    success_count, failed_count = await send_broadcast(
        bot=bot,
        session=session,
        send_func=bot.send_message,
        content_type="—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º",
        text=default_text
    )
    result_text = format_broadcast_result(success_count, failed_count, "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º", default_text)
    await callback.message.answer(result_text, reply_markup=admin_kb.admin_kb.as_markup())
    

@broadcast_router.callback_query(F.data=='send_video')
async def get_video(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer('')
    await state.clear()
    await state.set_state(SendVideo.waiting_for_video)
    await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ /cancel', reply_markup=admin_kb.back_to_admin.as_markup())

@broadcast_router.message(F.video, SendVideo.waiting_for_video)
async def receive_video(message: Message, state: FSMContext):
    video = message.video.file_id
    caption = message.caption 
    
    await state.update_data(video=video, caption=caption)
    await state.set_state(SendVideo.waiting_for_confirm)
    await message.answer(
    f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?\n\n"
    f"<b>–ü–æ–¥–ø–∏—Å—å:</b> {caption if caption else '–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏'}\n\n",
    reply_markup=admin_kb.confirm_send_video
    )

@broadcast_router.callback_query(F.data=='edit_caption', SendVideo.waiting_for_confirm)
async def edit_caption(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer('')
    await state.set_state(SendVideo.waiting_for_caption)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∫ –≤–∏–¥–µ–æ:')


@broadcast_router.message(F.text, SendVideo.waiting_for_caption)
async def receive_caption(message: Message, state: FSMContext):
    caption = message.text
    await state.update_data(caption=caption)
    await state.set_state(SendVideo.waiting_for_confirm)
    await message.answer(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?\n\n"
        f"<b>–ü–æ–¥–ø–∏—Å—å:</b> {caption}\n\n",
        reply_markup=admin_kb.confirm_send_video
    )


@broadcast_router.callback_query(F.data=='confirm_send_video', SendVideo.waiting_for_confirm)
async def broadcast_video_confirm(callback: CallbackQuery, bot: Bot, session: AsyncSession, state: FSMContext):
    data = await state.get_data()
    video = data.get('video')
    caption = data.get('caption')
    await state.clear()
    success_count, failed_count = await send_broadcast(
        bot=bot,
        session=session,
        send_func=bot.send_video,
        content_type="–≤–∏–¥–µ–æ",
        video=video,
        caption=caption
    )
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∏–¥–µ–æ
    if success_count > 0 or failed_count > 0:
        result_text = (
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≤–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n\n"
            f"üìù –í–∏–¥–µ–æ: <i>\"{video}\"</i>\n"
            f"üìù –ü–æ–¥–ø–∏—Å—å: {caption if caption else '–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏'}"
        )
    else:
        result_text = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç"
    await callback.message.answer(result_text, reply_markup=admin_kb.admin_kb.as_markup())
    await callback.answer('')

@broadcast_router.callback_query(F.data=='send_video_note')
async def send_video_node(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer('')
    await state.set_state(SendVideoNote.waiting_for_note)
    await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—Ä—É–∂–æ–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ /cancel', reply_markup=admin_kb.back_to_admin.as_markup())

@broadcast_router.message(F.video_note, SendVideoNote.waiting_for_note)
async def receive_video_note(message: Message, state: FSMContext):
    video_note = message.video_note.file_id
    await state.update_data(video_note=video_note)
    await state.set_state(SendVideoNote.waiting_for_confirm)
    await message.reply(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—Ä—É–∂–æ–∫ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?\n\n"
        f"<b>–ö—Ä—É–∂–æ–∫:</b> {video_note}\n\n",
        reply_markup=admin_kb.confirm_send_video_note)

@broadcast_router.callback_query(F.data=='confirm_send_video_note', SendVideoNote.waiting_for_confirm)
async def broadcast_video_note_confirm(callback: CallbackQuery, bot: Bot, session: AsyncSession, state: FSMContext):
    data = await state.get_data()
    video_note = data.get('video_note')
    await state.clear()
    success_count, failed_count = await send_broadcast(
        bot=bot,
        session=session,
        send_func=bot.send_video_note,
        content_type="–∫—Ä—É–∂–æ–∫",
        video_note=video_note
    )
    result_text = format_broadcast_result(success_count, failed_count, "–∫—Ä—É–∂–æ–∫", video_note)
    await callback.message.answer(result_text, reply_markup=admin_kb.admin_kb.as_markup())
    await callback.message.delete()
    await callback.answer('')

