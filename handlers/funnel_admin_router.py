from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession

import keyboards.funnel_kb as funnel_kb
import filters.admin_filter as Admin
from database.models import Funnel, FunnelStep
from database.orm_query import get_active_funnels, get_funnel_with_steps, create_funnel, create_funnel_step, delete_funnel

class FunnelCreation(StatesGroup):
    waiting_for_name = State()
    waiting_for_description = State()

class FunnelStepCreation(StatesGroup):
    waiting_for_title = State()
    waiting_for_content = State()
    waiting_for_delay = State()
    waiting_for_step_type = State()

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∞–¥–º–∏–Ω–∞
funnel_admin_router = Router()
funnel_admin_router.message.filter(Admin.IsAdmin())
funnel_admin_router.callback_query.filter(Admin.IsAdmin())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ—Ä–æ–Ω–∫–∞–º–∏
@funnel_admin_router.callback_query(F.data == 'manage_funnels')
async def manage_funnels(callback: CallbackQuery):
    await callback.message.delete()
    await callback.answer('')
    await callback.message.answer(
        'üîÑ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ—Ä–æ–Ω–∫–∞–º–∏ –ø—Ä–æ–¥–∞–∂</b>\n\n'
        '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–æ—Ä–æ–Ω–∫–∞–º–∏ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤.',
        reply_markup=funnel_kb.admin_funnel_kb.as_markup()
    )

@funnel_admin_router.callback_query(F.data == 'create_funnel')
async def start_create_funnel(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer('')
    await state.set_state(FunnelCreation.waiting_for_name)
    await callback.message.answer(
        'üÜï <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–æ—Ä–æ–Ω–∫–∏</b>\n\n'
        '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–æ—Ä–æ–Ω–∫–∏:\n\n'
        '<i>–ù–∞–ø—Ä–∏–º–µ—Ä: "–ö—É—Ä—Å –ø–æ —Å–Ω—è—Ç–∏—é —Å—Ç—Ä–µ—Å—Å–∞"</i>\n\n'
        '–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel'
    )

@funnel_admin_router.message(F.text, FunnelCreation.waiting_for_name)
async def get_funnel_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(FunnelCreation.waiting_for_description)
    await message.answer(
        'üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ—Ä–æ–Ω–∫–∏:\n\n'
        '<i>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –ø–æ–ª—É—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</i>\n\n'
        '–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel'
    )
    
@funnel_admin_router.message(F.text, FunnelCreation.waiting_for_description)
async def get_funnel_description(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()

    try: 
        funnel = await create_funnel(
            session=session, 
            name=data['name'], 
            description=message.text
        )
        await state.clear()
        await message.answer(
            f'‚úÖ <b>–í–æ—Ä–æ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n'
            f'üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data["name"]}\n'
            f'üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {message.text}\n'
            f'üÜî <b>ID –≤–æ—Ä–æ–Ω–∫–∏:</b> {funnel.id}\n\n'
            f'–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–∞–ø—ã –≤ –≤–æ—Ä–æ–Ω–∫—É.',
            reply_markup=funnel_kb.funnel_manage_kb.as_markup()
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–æ—Ä–æ–Ω–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∞–ø–æ–≤
        await state.update_data(current_funnel_id=funnel.id)
    except Exception as e:
        await message.answer(
            f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ—Ä–æ–Ω–∫–∏:\n\n'
            f'<code>{str(e)}</code>\n\n'
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
            reply_markup=funnel_kb.admin_funnel_kb.as_markup()
        )
        await state.clear()

# –°–ø–∏—Å–æ–∫ –≤–æ—Ä–æ–Ω–æ–∫
@funnel_admin_router.callback_query(F.data == 'list_funnels')
async def list_funnels(callback: CallbackQuery, session: AsyncSession):
    await callback.message.delete()
    await callback.answer('')
    funnels = await get_active_funnels(session)
    if funnels:
        for funnel in funnels:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–ø–æ–≤
            funnel_with_steps = await get_funnel_with_steps(session, funnel.id)
            steps_count = len(funnel_with_steps.steps)

            text = f'üìã <b>{funnel.name}</b>\n\n'
            if funnel.description:
                text += f'üìÑ {funnel.description}\n\n'
            text += f'üÜî <b>ID:</b> {funnel.id}\n'
            text += f'üìä <b>–≠—Ç–∞–ø–æ–≤:</b> {steps_count}\n'
            text += f'üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {funnel.created_at.strftime("%d.%m.%Y")}\n'

            # –ö–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Ä–æ–Ω–∫–æ–π
            manage_kb = funnel_kb.funnel_manage_kb.as_markup()
            await callback.message.answer(text, reply_markup=manage_kb)
    else:
        await callback.message.answer(
            'üì≠ –°–ø–∏—Å–æ–∫ –≤–æ—Ä–æ–Ω–æ–∫ –ø—É—Å—Ç\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –≤–æ—Ä–æ–Ω–∫—É!',
            reply_markup=funnel_kb.admin_funnel_kb.as_markup()
        )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ –≤–æ—Ä–æ–Ω–∫–∏
@funnel_admin_router.callback_query(F.data=='add_funnel_step')
async def start_add_funnel_step(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer('')
    await state.set_state(FunnelStepCreation.waiting_for_title)
    await callback.message.answer(
        'üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ –≤–æ—Ä–æ–Ω–∫–∏</b>\n\n'
        '–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —ç—Ç–∞–ø–∞:\n\n'
        '<i>–ù–∞–ø—Ä–∏–º–µ—Ä: "–î–µ–Ω—å 1: –û—Å–Ω–æ–≤—ã –¥—ã—Ö–∞—Ç–µ–ª—å–Ω–æ–π –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∏"</i>\n\n'
        '–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel'
    )

@funnel_admin_router.message(F.text, FunnelStepCreation.waiting_for_title)
async def get_step_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(FunnelStepCreation.waiting_for_content)
    await message.answer(
        'üìÑ –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç —ç—Ç–∞–ø–∞:\n\n'
        '<i>–¢–µ–∫—Å—Ç –∏–ª–∏ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</i>\n\n'
        '–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel'
    )

@funnel_admin_router.message(F.text, FunnelStepCreation.waiting_for_content)
async def get_step_content(message: Message, state: FSMContext, session: AsyncSession):

    # –î–ª—è —Ç–µ–∫—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
    await state.update_data(content=message.text)
    await state.update_data(content_type='text')
    await state.update_data(file_id=None)
    
    await state.set_state(FunnelStepCreation.waiting_for_delay)
    await message.answer(
        '‚è∞ –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π (–≤ —á–∞—Å–∞—Ö):\n\n'
        '<i>0 - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É, 24 - —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏</i>\n\n'
        '–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel'
    )

@funnel_admin_router.message(F.text, FunnelStepCreation.waiting_for_delay)
async def get_step_delay(message: Message, state: FSMContext):
    try:
        delay = int(message.text)
        if delay < 0:
            await message.answer('‚ùå –ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:')
            return
    except ValueError:
        await message.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:')
        return
    
    await state.update_data(delay_hours=delay)
    await state.set_state(FunnelStepCreation.waiting_for_step_type)
    await message.answer(
        'üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç—Ç–∞–ø–∞:\n\n'
        'üÜì <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π</b> - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —Å—Ä–∞–∑—É\n'
        'üí∞ <b>–ü–ª–∞—Ç–Ω—ã–π</b> - –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ "–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π" –∏–ª–∏ "–ø–ª–∞—Ç–Ω—ã–π":', reply_markup=funnel_kb.free_paid_kb
    )

@funnel_admin_router.message(F.video, FunnelStepCreation.waiting_for_content)
async def get_step_video(message: Message, state: FSMContext, session: AsyncSession):
    # –î–ª—è –≤–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º file_id –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    await state.update_data(file_id=message.video.file_id)
    await state.update_data(content_type='video')
    await state.update_data(content=message.caption or "–í–∏–¥–µ–æ —É—Ä–æ–∫")
    
    await state.set_state(FunnelStepCreation.waiting_for_delay)
    await message.answer(
        '‚è∞ –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π (–≤ —á–∞—Å–∞—Ö):\n\n'
        '<i>0 - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É, 24 - —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏</i>\n\n'
        '–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel'
    )

@funnel_admin_router.message(F.text, FunnelStepCreation.waiting_for_step_type)
async def get_step_type(message: Message, state: FSMContext, session: AsyncSession):
    step_type = message.text.lower().strip()

    if step_type not in ['–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π', '–ø–ª–∞—Ç–Ω—ã–π']:
        await message.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ "–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π" –∏–ª–∏ "–ø–ª–∞—Ç–Ω—ã–π"', reply_markup=funnel_kb.free_paid_kb)
        return
    
    is_free = step_type == '–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π'
    data = await state.get_data()

    try: 
        funnels = await get_active_funnels(session)
        if not funnels:
            await message.answer('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–æ–Ω–æ–∫. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –≤–æ—Ä–æ–Ω–∫—É.')
            await state.clear()
            return
        
        funnel = funnels[0]

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —ç—Ç–∞–ø–∞
        funnel_with_steps = await get_funnel_with_steps(session, funnel.id)
        next_order = len(funnel_with_steps.steps) + 1

        # –°–æ–∑–¥–∞–µ–º —ç—Ç–∞–ø
        step = await create_funnel_step(
            session=session,
            funnel_id=funnel.id,
            order=next_order,
            title=data['title'],
            content=data['content'],
            content_type=data['content_type'],
            delay_hours=data['delay_hours'],
            is_free=is_free,
            file_id=data.get('file_id')
        )

        await state.clear()
        content_type_text = "–í–∏–¥–µ–æ" if data['content_type'] == 'video' else "–¢–µ–∫—Å—Ç"
        await message.answer(
            f'‚úÖ <b>–≠—Ç–∞–ø —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n'
            f'üìù <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {data["title"]}\n'
            f'üìÑ <b>–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</b> {content_type_text}\n'
            f'‚è∞ <b>–ó–∞–¥–µ—Ä–∂–∫–∞:</b> {data["delay_hours"]} —á.\n'
            f'üí∞ <b>–¢–∏–ø:</b> {"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π" if is_free else "–ü–ª–∞—Ç–Ω—ã–π"}\n'
            f'üÜî <b>ID —ç—Ç–∞–ø–∞:</b> {step.id}',
            reply_markup=funnel_kb.funnel_manage_kb.as_markup()
        )
    except Exception as e:
        await message.answer(
            f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç—Ç–∞–ø–∞: {e}',
            reply_markup=funnel_kb.admin_funnel_kb.as_markup()
        )

# –ü—Ä–æ—Å–º–æ—Ç—Ä —ç—Ç–∞–ø–æ–≤ –≤–æ—Ä–æ–Ω–∫–∏
@funnel_admin_router.callback_query(F.data=='view_funnel_steps')
async def view_funnel_steps(callback: CallbackQuery, session: AsyncSession):
    await callback.message.delete()
    await callback.answer('')

    funnels = await get_active_funnels(session)
    if not funnels:
        await callback.message.answer('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–æ–Ω–æ–∫.')
        return
    
    funnel = funnels[0]
    funnel_with_steps = await get_funnel_with_steps(session, funnel.id)

    if funnel_with_steps.steps:
        text = f'üìã <b>–≠—Ç–∞–ø—ã –≤–æ—Ä–æ–Ω–∫–∏ "{funnel.name}"</b>\n\n'
        for step in funnel_with_steps.steps:
            content_type_icon = "üé•" if step.content_type == 'video' else "üìù"
            text += f'{content_type_icon} <b>{step.order}. {step.title}</b>\n'
            text += f'üìÑ –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {"–í–∏–¥–µ–æ" if step.content_type == "video" else "–¢–µ–∫—Å—Ç"}\n'
            text += f'‚è∞ –ó–∞–¥–µ—Ä–∂–∫–∞: {step.delay_hours} —á.\n'
            text += f'üí∞ –¢–∏–ø: {"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π" if step.is_free else "–ü–ª–∞—Ç–Ω—ã–π"}\n\n'
        
        await callback.message.answer(text, reply_markup=funnel_kb.funnel_manage_kb.as_markup())
    else:
        await callback.message.answer(
            'üì≠ –≠—Ç–∞–ø—ã –≤–æ—Ä–æ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø!',
            reply_markup=funnel_kb.funnel_manage_kb.as_markup()
        )

# –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ—Ä–æ–Ω–∫–∏
@funnel_admin_router.callback_query(F.data=='delete_funnel')
async def confirm_delete_funnel(callback: CallbackQuery):
    await callback.message.delete()
    await callback.answer('')
    await callback.message.answer(
        '‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n'
        '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–æ—Ä–æ–Ω–∫—É?\n'
        '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.',
        reply_markup=funnel_kb.delete_funnel_confirm
    )

@funnel_admin_router.callback_query(F.data=='confirm_delete_funnel')
async def delete_funnel_action(callback: CallbackQuery, session: AsyncSession):
    await callback.message.delete()
    await callback.answer('')
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–æ—Ä–æ–Ω–∫—É
        funnels = await get_active_funnels(session)
        if not funnels:
            await callback.message.answer('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–æ–Ω–æ–∫.')
            return

        funnel = funnels[0]
        await delete_funnel(session, funnel.id)

        await callback.message.answer(
            f'‚úÖ –í–æ—Ä–æ–Ω–∫–∞ "{funnel.name}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!',
            reply_markup=funnel_kb.admin_funnel_kb.as_markup()
        )
    except Exception as e:
        await callback.message.answer(
            f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ—Ä–æ–Ω–∫–∏: {e}',
            reply_markup=funnel_kb.admin_funnel_kb.as_markup()
        )

# –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
@funnel_admin_router.message(Command('cancel'))
async def cancel_funnel_operation(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
        await message.answer(
            '‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.',
            reply_markup=funnel_kb.admin_funnel_kb.as_markup()
        )
    else:
        await message.answer('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.') 