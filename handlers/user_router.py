from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, delete
from database.models import User, Service
from database.orm_query import get_or_create_user, deactivate_user, create_booking

from keyboards.user_menu import set_user_menu
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile, ChatMemberUpdated, \
    InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, Contact, ReplyKeyboardRemove, ResultChatMemberUnion
from aiogram.filters import CommandStart, Command, or_f, StateFilter
import keyboards.user_kb as user_kb
from handlers.user_text import START_TEXT
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from filters.admin_filter import admin
from datetime import datetime
from filters.month_filter import month_filter

class Signup(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_date = State()
    waiting_for_time = State()
    
CHANNEL_ID = -1002726677960

user_router = Router()
user_router.startup.register(set_user_menu)
image = FSInputFile("start.webp", filename='olesya.webp')


@user_router.message(CommandStart())
async def start(message: Message, session: AsyncSession):
    from_user = message.from_user
    user = await get_or_create_user(session, from_user.id, from_user.full_name)
    await message.answer_photo(photo=image, caption=START_TEXT, reply_markup=user_kb.start_kb.as_markup())


@user_router.message(Command(commands='help'))
async def help_cmd(message: Message):
    await message.answer('–≠—Ç–æ –±–æ—Ç –≥–¥–µ <b>–≤—ã –º–æ–∂–µ—Ç–µ</b>:\n\n–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —ç—Ñ–∏—Ä–∞—Ö\n'
    '–ò–∑—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã\n\n<b>–í—Å–µ –ø—Ä–æ—Å—Ç–æ –∏ —É–¥–æ–±–Ω–æ‚ù§</b>', reply_markup=user_kb.start_kb.as_markup())

@user_router.callback_query(F.data=='service_list')
async def service_list(callback: CallbackQuery, session: AsyncSession):    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    services = await session.scalars(select(Service).where(Service.is_active == True))
    services_list = list(services)
    # await callback.message.delete()

    if services_list:
        for service in services_list:
            signup_kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è', callback_data=f'signup_{service.id}')]
            ])
            text = f'<b>{service.name}</b>\n\n'
            text += f'üìù<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{service.description}\n'
            text += f'üí∞<b>–¶–µ–Ω–∞:</b> {service.price} ‚ÇΩ\n'
            if service.duration > 60:
                text += f'‚è±<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {(service.duration / 60):.2f} —á.\n\n'
            else:
                text += f'‚è±<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {service.duration} –º–∏–Ω.\n\n'
            await callback.message.answer(text, reply_markup=signup_kb)
    else:
        text = '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É—Å–ª—É–≥–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
    
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é', reply_markup=user_kb.back_mrk)
    await callback.answer('–ú–æ–∏ —É—Å–ª—É–≥–∏')

@user_router.callback_query(F.data=='back')
async def back(callback: CallbackQuery):
    await callback.message.delete()
    await callback.answer('')
    await callback.message.answer_photo(photo=image, caption=START_TEXT, 
    reply_markup=user_kb.start_kb.as_markup())



@user_router.my_chat_member()
async def handle_my_chat_member(event: ChatMemberUpdated, session: AsyncSession):
    """
    –£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã, –µ—Å–ª–∏ –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ (status = 'kicked' –∏–ª–∏ 'left').
    """
    if event.new_chat_member.status in ("kicked", "left"):  # kicked - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª, left - —É–¥–∞–ª–∏–ª
        tg_id = event.from_user.id
        await deactivate_user(session, tg_id)
        # await session.execute(delete(User).where(User.tg_id == tg_id))
        # await session.commit()

@user_router.message(Command('gift'))
async def sub_cmd(message: Message):
    await message.answer('–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å <b>–ø–æ–¥–∞—Ä–æ–∫</b> üéÅ\n<b>–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª üëá</b>', reply_markup=user_kb.sub_kb)



def check_sub_channel(chat_member):
    return chat_member.status != 'left'


@user_router.callback_query(F.data=='check_sub')
async def gift_cmd(callback: CallbackQuery, bot: Bot):
    await callback.answer('')
    await callback.message.delete()
    chat_member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=callback.from_user.id)
    if not check_sub_channel(chat_member):
        await callback.message.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª\n<b>–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫üéÅ üëá</b>", reply_markup=user_kb.sub_kb)
        return
    else:
        await callback.message.answer("–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å <b>–ø–æ–¥–∞—Ä–æ–∫</b> üéÅ\n<b>–ñ–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá</b>\n", 
        reply_markup=user_kb.gift_kb)

@user_router.message(Command('cancel'))
async def cancel_signup(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state and current_state.startswith('Signup:'):
        await state.clear()
        await message.answer(
            "‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å, –≤—ã–±—Ä–∞–≤ —É—Å–ª—É–≥—É –≤ –º–µ–Ω—é.",
            reply_markup=user_kb.back_mrk
        )
    else:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã")

@user_router.callback_query(F.data.startswith('signup_'))
async def start_signup(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    service_id = int(callback.data.split('_')[1])
    service = await session.scalar(select(Service).where(Service.id == service_id))
    
    if service:
        await state.update_data(service_id=service_id, service_name=service.name, service_price=service.price)
        await state.set_state(Signup.waiting_for_name)
        await callback.message.answer(
            f"üìù <b>–ó–∞–ø–∏—Å—å –Ω–∞ —É—Å–ª—É–≥—É: {service.name}</b>\n\n"
            f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {service.price} ‚ÇΩ\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:\n\n"
            f"<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel</i>"
        )
        await callback.answer()
    else:
        await callback.message.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await callback.answer()

@user_router.message(F.text, Signup.waiting_for_name)
async def get_name(message: Message, state: FSMContext):
    if len(message.text.strip()) < 2:
        await message.answer("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    await state.update_data(name=message.text.strip())
    await state.set_state(Signup.waiting_for_phone)
    contact_kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer(
        "üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n\n"
        "<i>–§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX</i>\n\n"
        "<i>–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º</i>\n\n"
        "<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel</i>",
        reply_markup=contact_kb
    )

@user_router.message(Signup.waiting_for_phone)
async def get_phone(message: Message, state: FSMContext, bot: Bot):
    if message.contact:
        contact: Contact = message.contact
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        await state.update_data(
            phone=contact.phone_number,
            contact_first_name=contact.first_name,
            contact_last_name=contact.last_name
        )
        await state.set_state(Signup.waiting_for_date)
    else:
        try:
            phone = message.text.strip()
            # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            if not (phone.startswith('+7') or phone.startswith('8')) or len(phone) < 10:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:\n\n<i>–§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX</i>")
                return
            if phone.startswith('8'):
                phone = '+7' + phone[1:]
            phone = phone.replace(' ', '')
            await state.update_data(phone=phone)
            await state.set_state(Signup.waiting_for_date)
        except:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:\n\n<i>–§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX</i>")
            return
    await message.answer(
    "üìÖ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—É—é –¥–∞—Ç—É:\n\n"
    "<i>–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.01)</i>\n\n"
    "<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel</i>",
    reply_markup=ReplyKeyboardRemove()
    )

@user_router.message(Signup.waiting_for_date)
async def get_date(message: Message, state: FSMContext):
    date_text = message.text.strip()
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
    try:
        datetime.strptime(date_text, '%d.%m')
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:\n\n<i>–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.01)</i>")
        return
    
    date_text = date_text.split('.')
    if len(date_text[1]) == 1:
        date_text[1] = '0' + date_text[1]
    date_text[1] = month_filter[date_text[1]]
    date_text = ' '.join(date_text)
    await state.update_data(preferred_date=date_text)
    await state.set_state(Signup.waiting_for_time)
    await message.answer(
        "üïê –í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è:\n\n"
        "<i>–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:00)</i>\n\n"
        "<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel</i>"
    )

@user_router.message(Signup.waiting_for_time)
async def get_time(message: Message, state: FSMContext, bot: Bot, session: AsyncSession):
    time_text = message.text.strip()
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
    try:
        datetime.strptime(time_text, '%H:%M')
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:\n\n<i>–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:00)</i>")
        return
    
    await state.update_data(preferred_time=time_text)
    data = await state.get_data()
    try:
        booking = await create_booking(
            session=session,
            user_tg_id=message.from_user.id,
            service_id=data['service_id'],
            client_name=data['name'],
            phone=data['phone'],
            preferred_date=data['preferred_date'],
            preferred_time=data['preferred_time']
        )   
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        admin_text = f"üéØ <b>–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ —É—Å–ª—É–≥—É!</b>\n\n"
        admin_text += f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {data['name']}\n"
        admin_text += f"üÜî <b>Telegram ID:</b> {message.from_user.id}\n"
        admin_text += f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data['phone']}\n"
        admin_text += f"üéØ <b>–£—Å–ª—É–≥–∞:</b> {data['service_name']}\n"
        admin_text += f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {data['service_price']} ‚ÇΩ\n"
        admin_text += f"üìÖ <b>–î–∞—Ç–∞:</b> {data['preferred_date']}\n"
        admin_text += f"üïê <b>–í—Ä–µ–º—è:</b> {data['preferred_time']}\n"
        
        try:
            await bot.send_message(chat_id=admin, text=admin_text)
            if 'contact_first_name' in data:
                await bot.send_contact(
                    chat_id=admin,
                    phone_number=data['phone'], 
                    first_name=data['contact_first_name'], 
                    last_name=data['contact_last_name'])
            else:
                await bot.send_contact(
                    chat_id=admin, 
                    phone_number=data['phone'], 
                    first_name=data['name']
                    )
        except Exception as admin_error:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {admin_error}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=user_kb.back_mrk
            )
            return

        await message.answer(
            "‚úÖ <b>–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"üéØ <b>–£—Å–ª—É–≥–∞:</b> {data['service_name']}\n"
            f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {data['service_price']} ‚ÇΩ\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {data['preferred_date']}\n"
            f"üïê <b>–í—Ä–µ–º—è:</b> {data['preferred_time']}\n\n"
            "üìû –Ø —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏.\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! ‚ù§Ô∏è",
            reply_markup=user_kb.back_mrk
        )
    except Exception as e:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=user_kb.back_mrk
        )
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
    await state.clear()


@user_router.message()
async def spam(message: Message):
    await message.answer('–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏', reply_markup=user_kb.back_mrk)

