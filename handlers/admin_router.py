from aiogram import Router, F, Bot
from aiogram.types import InlineKeyboardMarkup, Message, CallbackQuery, InlineKeyboardButton
from aiogram.filters import CommandStart, Command, and_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select, delete
from sqlalchemy.ext.asyncio import AsyncSession

import keyboards.admin_kb as admin_kb
import filters.admin_filter as Admin
from database.models import User, Service
from database.orm_query import get_all_bookings, delete_booking


class ServiceCreation(StatesGroup):
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_price = State()
    waiting_for_duration = State()


class DeleteService(StatesGroup):
    waiting_for_confirmation = State()

admin_router = Router()
admin_router.message.filter(Admin.IsAdmin())
admin_router.callback_query.filter(Admin.IsAdmin())

@admin_router.message(CommandStart())
async def admin_start(message: Message):
    await message.answer('–í—ã –∞–¥–º–∏–Ω–∏—Å–∫—Ç—Ä–∞—Ç–æ—Ä –≤—ã –º–æ–∂–µ—Ç–µ c–¥–µ–ª–∞—Ç—å:', reply_markup=admin_kb.admin_kb.as_markup())


@admin_router.callback_query(F.data=='back_to_admin')
async def back_to_admin(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    print(current_state)
    if current_state is not None:
        await state.clear()
    await callback.message.delete()
    await callback.answer('')
    await callback.message.answer('–í—ã –∞–¥–º–∏–Ω–∏—Å–∫—Ç—Ä–∞—Ç–æ—Ä –≤—ã –º–æ–∂–µ—Ç–µ c–¥–µ–ª–∞—Ç—å:', reply_markup=admin_kb.admin_kb.as_markup())

@admin_router.message(Command(commands='cancel'))
async def cancel_broadcast_settings(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
        await message.answer('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.', reply_markup=admin_kb.admin_kb.as_markup())
    else:
        await message.answer('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.')


@admin_router.callback_query(F.data=='user_list')
async def send_all(callback: CallbackQuery, session: AsyncSession):
    await callback.message.delete()
    await callback.answer('')
    users = await session.scalars(select(User))
    users = users.all()
    text = []
    if users:
        for user in users:
            status = '–ê–∫—Ç–∏–≤–Ω—ã–π'
            if not user.is_active:
                status = '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π'
            text.append(f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.name}\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.tg_id}\nC—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{status}</b>")
        await callback.message.answer(text='\n\n'.join(i for i in text), reply_markup=admin_kb.admin_kb.as_markup())
    else:
        await callback.message.answer('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑', reply_markup=admin_kb.admin_kb.as_markup())

# FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—Å–ª—É–≥
@admin_router.callback_query(F.data=='add_service')
async def start_add_service(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer('')
    await state.set_state(ServiceCreation.waiting_for_name)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel')

@admin_router.message(ServiceCreation.waiting_for_name)
async def get_service_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(ServiceCreation.waiting_for_description)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel')

@admin_router.message(ServiceCreation.waiting_for_description)
async def get_service_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(ServiceCreation.waiting_for_price)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —É—Å–ª—É–≥–∏ (–≤ —Ä—É–±–ª—è—Ö, —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel')

@admin_router.message(ServiceCreation.waiting_for_price)
async def get_service_price(message: Message, state: FSMContext):
    try:
        price = int(message.text)
        if price <= 0:
            await message.answer('–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:')
            return
        await state.update_data(price=price)
        await state.set_state(ServiceCreation.waiting_for_duration)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel')
    except ValueError:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã:')

@admin_router.message(ServiceCreation.waiting_for_duration)
async def get_service_duration(message: Message, state: FSMContext, session: AsyncSession):
    try:
        duration = int(message.text)
        if duration <= 0:
            await message.answer('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:')
            return
        
        data = await state.get_data()
        new_service = Service(
            name=data['name'],
            description=data['description'],
            price=data['price'],
            duration=duration
        )
        
        session.add(new_service)
        await session.commit()
        
        await state.clear()
        await message.answer(
            f'‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n'
            f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data["name"]}\n'
            f'<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data["description"]}\n'
            f'<b>–¶–µ–Ω–∞:</b> {data["price"]} ‚ÇΩ\n'
            f'<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {duration} –º–∏–Ω.',
            reply_markup=admin_kb.admin_kb.as_markup()
        )
    except ValueError:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:')

@admin_router.callback_query(F.data=='view_services')
async def view_services(callback: CallbackQuery, session: AsyncSession):
    await callback.message.delete()
    await callback.answer('–í—Å–µ —É—Å–ª—É–≥–∏')
    
    services = await session.scalars(select(Service).where(Service.is_active == True))
    services_list = list(services)
    
    if services_list:
        text = '<b>–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å–ª—É–≥:</b>\n\n'
        for service in services_list:
            service_kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text='‚ùå –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É', callback_data=f'delete_{service.id}')]
                ]
            )
            text = f'<b>{service.name}</b>\n'
            text += f'üìù {service.description}\n'
            text += f'üí∞ {service.price} ‚ÇΩ\n'
            text += f'‚è± {service.duration} –º–∏–Ω.\n'
            text += f'ID: {service.id}\n\n'
            await callback.message.answer(text, reply_markup=service_kb)
    else:
        await callback.message.answer('–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –ø—É—Å—Ç', reply_markup=admin_kb.back_to_admin.as_markup())
        return
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è <b>—É–¥–∞–ª–µ–Ω–∏—è</b> –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é', reply_markup=admin_kb.back_to_admin.as_markup())


@admin_router.callback_query(F.data.startswith('delete_'))
async def delete_service(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    await callback.message.delete()
    await callback.message.answer('–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É?', reply_markup=admin_kb.delete_confirm.as_markup())
    await callback.answer('')
    await state.set_state(DeleteService.waiting_for_confirmation)
    await state.update_data(service_id=callback.data.split('_')[1])



@admin_router.callback_query(F.data=='confirm_delete', DeleteService.waiting_for_confirmation)
async def confirm_delete(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    service_id = data['service_id']
    await session.execute(delete(Service).where(Service.id == service_id))
    await session.commit()
    await state.clear()
    await callback.message.delete()
    await callback.answer('')
    await callback.message.answer(f'–£—Å–ª—É–≥–∞ <b>{service_id}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞', reply_markup=admin_kb.back_to_admin.as_markup())


@admin_router.callback_query(F.data=='view_bookings')
async def view_bookings(callback: CallbackQuery, session: AsyncSession):
    await callback.answer('')
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
        bookings = await get_all_bookings(session)
        
        if bookings:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
            recent_bookings = bookings[:10]
            
            for booking in recent_bookings:
                booking_text = f"<b>–ó–∞–ø–∏—Å—å #{booking.id}</b>\n"
                booking_text += f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {booking.client_name}\n"
                booking_text += f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {booking.phone}\n"
                booking_text += f"üéØ <b>–£—Å–ª—É–≥–∞:</b> {booking.service.name}\n"
                booking_text += f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {booking.service.price} ‚ÇΩ\n"
                booking_text += f"üìÖ <b>–î–∞—Ç–∞:</b> {booking.preferred_date}\n"
                booking_text += f"üïê <b>–í—Ä–µ–º—è:</b> {booking.preferred_time}\n"
                booking_text += f"üìù <b>–°–æ–∑–¥–∞–Ω–∞:</b> {booking.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                
                await callback.message.answer(
                    booking_text, 
                    reply_markup=admin_kb.get_booking_actions_kb(booking.id)
                )
                
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞–ø–∏—Å–µ–π
            if len(bookings) > 10:
                await callback.message.answer(
                    f"üìä <b>–ü–æ–∫–∞–∑–∞–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –∑–∞–ø–∏—Å–µ–π –∏–∑ {len(bookings)}</b>\n\n"
                    f"–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π —É–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ.",
                    reply_markup=admin_kb.back_to_admin.as_markup()
                )
            else:
                await callback.message.answer(
                    f"üìä <b>–ü–æ–∫–∞–∑–∞–Ω–æ {len(bookings)} –∑–∞–ø–∏—Å–µ–π</b>\n\n"
                    f"–ï—Å–ª–∏ –≤—ã —É–∂–µ –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏ –∏–ª–∏ –≤—Å—Ç—Ä–µ—á–∞ –Ω–µ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å\n"
                    f"<b>–ó–∞–≤–µ—Ä—à–∏—Ç–µ</b> –ª–∏–±–æ <b>–û—Ç–º–µ–Ω–∏—Ç–µ</b> –∑–∞–ø–∏—Å—å\n\n"
                    f"<b>–ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏</b> –∫–ª–∏–µ–Ω—Ç—É –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –æ–± –æ—Ç–∑—ã–≤–µ\n"
                    f"<b>–ü—Ä–∏ –æ—Ç–º–µ–Ω–µ</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –µ–≥–æ –∑–∞–ø–∏—Å–∏",
                    reply_markup=admin_kb.back_to_admin.as_markup()
                )

        else:
            await callback.message.answer(
                'üìã –ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç', 
                reply_markup=admin_kb.admin_kb.as_markup()
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: {e}")
        await callback.message.answer(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π', 
            reply_markup=admin_kb.admin_kb.as_markup()
        )


@admin_router.callback_query(F.data.startswith('booking_cancel_'))
async def cancel_booking(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    booking_id = callback.data.split('_')[2]
    booking_user_chat = await delete_booking(session, booking_id)
    if booking_user_chat:
        await bot.send_message(chat_id=booking_user_chat, text='–í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå')
        await callback.message.answer(f'–ó–∞–ø–∏—Å—å <b>{booking_id}</b> –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞', reply_markup=admin_kb.back_to_admin.as_markup())
    else:
        await callback.message.answer(f'–ó–∞–ø–∏—Å—å <b>{booking_id}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', reply_markup=admin_kb.back_to_admin.as_markup())
    await callback.message.delete()
    await callback.answer('')
    

@admin_router.callback_query(F.data.startswith('booking_complete_'))
async def complete_booking(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    booking_id = callback.data.split('_')[2]
    booking_user_chat = await delete_booking(session, booking_id)
    if booking_user_chat:
        await bot.send_message(chat_id=booking_user_chat, text='–ü—Ä–æ—à—É –≤–∞—Å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –º–æ–µ–π —Ä–∞–±–æ—Ç–µ!', reply_markup=admin_kb.review_kb)    
        await callback.message.answer(f'–ó–∞–ø–∏—Å—å <b>{booking_id}</b> –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞', reply_markup=admin_kb.back_to_admin.as_markup())
    else:
        await callback.message.answer(f'–ó–∞–ø–∏—Å—å <b>{booking_id}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', reply_markup=admin_kb.back_to_admin.as_markup())
    await callback.message.delete()
    await callback.answer('')
    