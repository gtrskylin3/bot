from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command, and_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

import keyboards.admin_kb as admin_kb
import filters.admin_filter as Admin
from database.models import User, Service
from database.orm_query import get_active_users, deactivate_user, get_or_create_broadcast_settings, update_default_broadcast_text


class ServiceCreation(StatesGroup):
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_price = State()
    waiting_for_duration = State()


class BroadcastSettings(StatesGroup):
    waiting_for_default_text = State()
    waiting_for_custom_text = State()


admin_router = Router()
admin_router.message.filter(Admin.IsAdmin())

@admin_router.message(CommandStart())
async def admin_start(message: Message):
    await message.answer('–í—ã –∞–¥–º–∏–Ω–∏—Å–∫—Ç—Ä–∞—Ç–æ—Ä –≤—ã –º–æ–∂–µ—Ç–µ c–¥–µ–ª–∞—Ç—å:', reply_markup=admin_kb.admin_kb.as_markup())

@admin_router.callback_query(F.data=='send_all')
async def send_all_menu(callback: CallbackQuery, session: AsyncSession):
    await callback.message.delete()
    await callback.answer('')
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –∞–¥–º–∏–Ω–∞
    settings = await get_or_create_broadcast_settings(session)
    

    
    
    await callback.message.answer(
        f'üì¢ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n'
        f'–¢–µ–∫—É—â–∏–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç:\n'
        f'<i>"{settings.default_text}"</i>\n\n'
        f'–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:',
        reply_markup=admin_kb.broadcast_kb.as_markup()
    )

@admin_router.callback_query(F.data=='send_default')
async def send_default_broadcast(callback: CallbackQuery, bot: Bot, session: AsyncSession):
    await callback.message.delete()
    await callback.answer('')
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
    settings = await get_or_create_broadcast_settings(session)
    users = await get_active_users(session)
    
    if users:
        success_count = 0
        failed_count = 0
        
        for user in users:
            try:
                await bot.send_message(chat_id=str(user.tg_id), text=settings.default_text)
                success_count += 1
            except Exception as e:
                failed_count += 1
                await deactivate_user(session, user.tg_id)
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.tg_id}: {e}")
        
        await callback.message.answer(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n\n"
            f"üìù –¢–µ–∫—Å—Ç: <i>\"{settings.default_text}\"</i>",
            reply_markup=admin_kb.admin_kb.as_markup()
        )
    else:
        await callback.message.answer('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç', reply_markup=admin_kb.admin_kb.as_markup())

@admin_router.callback_query(F.data=='send_custom')
async def start_custom_broadcast(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer('')
    await state.set_state(BroadcastSettings.waiting_for_custom_text)
    await callback.message.answer(
        '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n'
        '–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel'
    )

@admin_router.callback_query(F.data=='change_default')
async def start_change_default(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer('')
    await state.set_state(BroadcastSettings.waiting_for_default_text)
    await callback.message.answer(
        '‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n'
        '–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel'
    )

@admin_router.callback_query(F.data=='back_to_admin')
async def back_to_admin(callback: CallbackQuery):
    await callback.message.delete()
    await callback.answer('')
    await callback.message.answer('–í—ã –∞–¥–º–∏–Ω–∏—Å–∫—Ç—Ä–∞—Ç–æ—Ä –≤—ã –º–æ–∂–µ—Ç–µ c–¥–µ–ª–∞—Ç—å:', reply_markup=admin_kb.admin_kb.as_markup())

@admin_router.message(Command(commands='cancel'))
async def cancel_broadcast_settings(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
        await message.answer('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.', reply_markup=admin_kb.admin_kb.as_markup())
    else:
        await message.answer('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.')

@admin_router.message(BroadcastSettings.waiting_for_custom_text)
async def get_custom_text(message: Message, state: FSMContext, bot: Bot, session: AsyncSession):
    custom_text = message.text
    await state.clear()
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = await get_active_users(session)
    
    if users:
        success_count = 0
        failed_count = 0
        
        for user in users:
            try:
                await bot.send_message(chat_id=str(user.tg_id), text=custom_text)
                success_count += 1
            except Exception as e:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
                failed_count += 1
                await deactivate_user(session, user.tg_id)
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.tg_id}: {e}")
        
        await message.answer(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n\n"
            f"üìù –¢–µ–∫—Å—Ç: <i>\"{custom_text}\"</i>",
            reply_markup=admin_kb.admin_kb.as_markup()
        )
    else:
        await message.answer('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç', reply_markup=admin_kb.admin_kb.as_markup())

@admin_router.message(BroadcastSettings.waiting_for_default_text)
async def get_new_default_text(message: Message, state: FSMContext, session: AsyncSession):
    new_text = message.text
    await state.clear()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
    await update_default_broadcast_text(session, new_text)
    
    await message.answer(
        f"‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
        f"üìù –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç: <i>\"{new_text}\"</i>\n\n"
        f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –≤—ã–±–æ—Ä–µ '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç' –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç.",
        reply_markup=admin_kb.admin_kb.as_markup()
    )

@admin_router.callback_query(F.data=='user_list')
async def send_all(callback: CallbackQuery, session: AsyncSession):
    await callback.message.delete()
    await callback.answer('')
    users = await session.scalars(select(User))
    text = []
    if users:
        for user in users:
            status = '–ê–∫—Ç–∏–≤–Ω—ã–π'
            if not user.is_active:
                status = '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π'
            text.append(f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.name}\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.tg_id}\nC—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{status}</b>")
        await callback.message.answer(text='\n\n'.join(i for i in text), reply_markup=admin_kb.admin_kb.as_markup())
    else:
        await callback.message.answer('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑', reply_markup=admin_kb.admin_kb.as_markup())

# FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—Å–ª—É–≥
@admin_router.callback_query(F.data=='add_service')
async def start_add_service(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer('')
    await state.set_state(ServiceCreation.waiting_for_name)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel')

@admin_router.message(ServiceCreation.waiting_for_name)
async def get_service_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(ServiceCreation.waiting_for_description)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel')

@admin_router.message(ServiceCreation.waiting_for_description)
async def get_service_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(ServiceCreation.waiting_for_price)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —É—Å–ª—É–≥–∏ (–≤ —Ä—É–±–ª—è—Ö, —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel')

@admin_router.message(ServiceCreation.waiting_for_price)
async def get_service_price(message: Message, state: FSMContext):
    try:
        price = int(message.text)
        if price <= 0:
            await message.answer('–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:')
            return
        await state.update_data(price=price)
        await state.set_state(ServiceCreation.waiting_for_duration)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel')
    except ValueError:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã:')

@admin_router.message(ServiceCreation.waiting_for_duration)
async def get_service_duration(message: Message, state: FSMContext, session: AsyncSession):
    try:
        duration = int(message.text)
        if duration <= 0:
            await message.answer('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:')
            return
        
        data = await state.get_data()
        new_service = Service(
            name=data['name'],
            description=data['description'],
            price=data['price'],
            duration=duration
        )
        
        session.add(new_service)
        await session.commit()
        
        await state.clear()
        await message.answer(
            f'‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n'
            f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data["name"]}\n'
            f'<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data["description"]}\n'
            f'<b>–¶–µ–Ω–∞:</b> {data["price"]} ‚ÇΩ\n'
            f'<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {duration} –º–∏–Ω.',
            reply_markup=admin_kb.admin_kb.as_markup()
        )
    except ValueError:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:')

@admin_router.callback_query(F.data=='view_services')
async def view_services(callback: CallbackQuery, session: AsyncSession):
    await callback.message.delete()
    await callback.answer('')
    
    services = await session.scalars(select(Service).where(Service.is_active == True))
    services_list = list(services)
    
    if services_list:
        text = '<b>–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å–ª—É–≥:</b>\n\n'
        for service in services_list:
            text += f'<b>{service.name}</b>\n'
            text += f'üìù {service.description}\n'
            text += f'üí∞ {service.price} ‚ÇΩ\n'
            text += f'‚è± {service.duration} –º–∏–Ω.\n'
            text += f'ID: {service.id}\n\n'
    else:
        text = '–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –ø—É—Å—Ç'
    
    await callback.message.answer(text, reply_markup=admin_kb.admin_kb.as_markup())

